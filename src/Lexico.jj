// Lexico.jj - Exemplo de Analisador Léxico com JavaCC

options {
  JAVA_UNICODE_ESCAPE = true;  // Permite o uso de escape Unicode.
}

PARSER_BEGIN(Lexico)  // Nome da classe do analisador léxico

public class Lexico {
  public static void main(String[] args) throws ParseException {
    String input = "int x = (10 + 20) - 5";  // Entrada de exemplo
    Lexico lex = new Lexico(new java.io.StringReader(input));
    Token t = lex.getNextToken();
    while (t.kind != EOF) {
      System.out.println("Token: " + t.image);
      t = lex.getNextToken();
    }
  }
}

PARSER_END(Lexico)

// ** Tokens básicos: letras e dígitos **
TOKEN: {
  < LETTER: ["a"-"z", "A"-"Z"] >  // Letras
}

TOKEN: {
  < DIGIT: ["0"-"9"] >  // Dígitos
}

// ** Tokens de palavras-chave e operadores **
TOKEN: {
  < INT: "int" > |
  < PLUS: "+" > |
  < MINUS: "-" >|
  < TIMES: "*" >|
  < DIVIDE: "/"> |
  < EQUAL: "="> |
  < SEMICOLON: ";"> |
  < LPAREN: "(" >|
  < RPAREN: ")">
}

// ** Tokens compostos: identificadores e números **
TOKEN: {
  < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)* >  // Identificadores (nomes de variáveis)
}

TOKEN: {
  < NUMBER: (<DIGIT>)+ >  // Números inteiros
}

// ** Ignorar espaços em branco **
SKIP: {
  < WHITESPACE: [" ", "\t", "\n", "\r"] >
}
