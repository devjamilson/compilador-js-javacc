// Lexico.jj - Exemplo de Analisador Léxico com JavaCC

options {
  JAVA_UNICODE_ESCAPE = true;  // Permite o uso de escape Unicode.
}

PARSER_BEGIN(Lexico)  // Nome da classe do analisador léxico

public class Lexico {
  public static void main(String[] args) throws ParseException {
    String input = "int x = (10 + 20) - 5";  // Entrada de exemplo
    Lexico lex = new Lexico(new java.io.StringReader(input));
    Token t = lex.getNextToken();
    while (t.kind != EOF) {
      System.out.println("Token: " + t.image);
      t = lex.getNextToken();
    }
  }
}

PARSER_END(Lexico)


// OPERADORES RELACIONAIS
TOKEN: {
  < EQ: "==" >     
  | < EQ_STRICT: "===" >   
  | < NEQ: "!=" >  
  | < NEQ_STRICT: "!==">  
  | < LT: "<" >     
  | < GT: ">" >     
  | < LE: "<=" >    
  | < GE: ">=" >    
}

// OPERADORES ARITMETICOS
TOKEN: {
  < PLUS: "+" >     
  | < MINUS: "-" >  
  | < TIMES: "*" >   
  | < DIVIDE: "/" >  
  | < MOD: "%" >    
}

// OPERADORES BOOLEANOS
TOKEN: {
  < AND: "&&" >   
  | < OR: "||" >
  | < NOT: "!" >
}

// OPERADORES DE ATRIBUIÇÃO
TOKEN: {
  < ASSIGN: "=" >      
  | < ADD_ASSIGN: "+=" > 
  | < SUB_ASSIGN: "-=" > 
  | < MUL_ASSIGN: "*=" >
  | < DIV_ASSIGN: "/=" > 
  | < MOD_ASSIGN: "%=" >
}

// TOKENS PARA UM LAÇO FOR
TOKEN: {
  < FOR: "for" >
  | < LPAREN: "(" >
  | < RPAREN: ")" >
  | < SEMICOLON: ";" >
  | < COMMA: "," >
}

// TOKEN PARA O TIPO BÁSICO INTEIRO E REAL
TOKEN: {
  < NUMBER: (<DIGIT>)+ > 
  | < REAL: (<DIGIT>)+ "." (<DIGIT>)+ >
}

// TOKEN PARA O TIPO BÁSICO STRING
TOKEN: {
  < STRING: "\"" (~["\""])* "\"" >
  | < STRING_SINGLE: "'" (~["'"])* "'" > 
}

// LETRAS E NUMEROS
TOKEN: {
  < LETTER: ["a"-"z", "A"-"Z"] > |
  < DIGIT: ["0"-"9"] > 
}


// DECLARAÇÃO DE FUNÇÕES
TOKEN: {
  < FUNCTION: "function" >
  | < LBRACE: "{" >
  | < RBRACE: "}" > 
}


// CHAMANDO FUNÇÕES
TOKEN: {
  < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)* >
}

// ENTRADA E SAÍDA
TOKEN: {
  < CONSOLE_LOG: "console.log" >
  | < PROMPT: "prompt" >
  | < READLINE: "readline" >
}


// ESTRUTURA CONDICINAL SIMPLES E COMPOSTA
TOKEN: {
  < IF: "if" >
  | < ELSE: "else" >
}


// IGNORA ESPAÇOS EM BRANCO
SKIP: {
  < WHITESPACE: [" ", "\t", "\n", "\r"] >
}
