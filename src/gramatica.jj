PARSER_BEGIN(Gramm)

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Gramm {
    public static void main(String[] args) {
        // Caminho do arquivo de entrada
        String path = "program.txt"; // Defina o caminho do arquivo para teste

        try (BufferedReader reader = new BufferedReader(new FileReader(path))) {
            String line;
            while ((line = reader.readLine()) != null) {
                // Apenas imprime o conteúdo do arquivo para verificação
                System.out.println(line);
            }
        } catch (IOException e) {
            System.out.println("Erro ao ler o arquivo: " + e.getMessage());
        }
    }
}

PARSER_END



PARSER_END(Gramm)

// Espaços em branco
SKIP : {
    " " | "\r" | "\t" | "\n"
}

// Operadores
TOKEN : {
    <ATRIBUICAO: "=" > 
  | <MAIOR: ">" > 
  | <MENOR: "<" > 
  | <NEGACAO: "!" > 
  | <IGUAL: "==" > 
  | <AND: "&&" > 
  | <OR: "||" > 
  | <MAIS: "+" > 
  | <MENOS: "-" > 
  | <ASTERISCO: "*" > 
  | <BARRA: "/" > 
  | <PONTO_VIRGULA: ";"> 
}

// Delimitadores
TOKEN : {
    <ABRE_PARENTESES: "("> 
  | <FECHA_PARENTESES: ")"> 
  | <ABRE_CHAVE: "{"> 
  | <FECHA_CHAVE: "}"> 
  | <ABRE_COLCHETE: "["> 
  | <FECHA_COLCHETE: "]"> 
}

// Palavras reservadas
TOKEN : {
    <CLASS: "class"> 
  | <IF: "if"> 
  | <ELSE: "else"> 
  | <RETURN: "return"> 
}

// Literais e Identificadores
TOKEN : {
    <STRING_LITERAL: "\"" (~["\"","\\"] | "\\" ["\"","\\","b","f","n","r","t"])* "\"" > 
  | <NUMBER: (["0"-"9"])+ > 
  | <IDENTIFIER: (<LETRA> | <ESPECIAL>) (<LETRA> | <DIGITO> | <ESPECIAL>)* > 
}

TOKEN : {
    <LET: "let"> 
  | <VAR: "var"> 
  | <CONST: "const"> 
}

// Regras gramaticais
void program() : {} {
    statement()*  // Permite múltiplas instruções
}

void statement() : {} {
    ( consoleLog() 
  | prompt()
  | ifStatement()
  | variableDeclaration()
  | expression()
  ) <PONTO_VIRGULA>
}

void consoleLog() : {} {
    <CONSOLE> <PONTO> <LOG> <ABRE_PARENTESES> argumentList() <FECHA_PARENTESES>
}

void prompt() : {} {
    <PROMPT> <ABRE_PARENTESES> (value())? (<VIRGULA> value())? <FECHA_PARENTESES>
}

void argumentList() : {} {
    value() (<VIRGULA> value())* // Lista de argumentos (com possibilidade de mais valores separados por vírgula)
}

void ifStatement() : {} {
    <IF> <ABRE_PARENTESES> expression() <FECHA_PARENTESES> <ABRE_CHAVE> statement()* <FECHA_CHAVE>
    ( <ELSE> <ABRE_CHAVE> statement()* <FECHA_CHAVE> )?
}

void variableDeclaration() : {} {
    (<LET> | <VAR> | <CONST>) <IDENTIFIER> (<ATRIBUICAO> expression())? 
}

void expression() : {} {
    value() (<MAIS> value())? // Expressão com possibilidade de soma
}

void value() : {} {
    <NUMBER> | <STRING_LITERAL> | <IDENTIFIER>
}
